name: Update Trophies in README

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  update-trophies:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests

      - name: Fetch and filter trophies, update README
        env:
          GITHUB_USERNAME: DevRitesh08
          # GITHUB_TOKEN is still needed for pushing commits, not for the trophy API
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 << 'EOF'
          import os, sys, json, re, requests

          username = os.getenv("GITHUB_USERNAME")
          token = os.getenv("GITHUB_TOKEN")
          if not username or not token:
              print("❌ GITHUB_USERNAME or GITHUB_TOKEN not set")
              sys.exit(1)

          # POINT AT THE CORRECT JSON ENDPOINT
          url = f"https://github-profile-trophy.vercel.app/api?username={username}"
          resp = requests.get(url)
          if resp.status_code != 200:
              print(f"❌ Failed to fetch trophies: HTTP {resp.status_code}")
              print(resp.text)
              sys.exit(1)

          try:
              data = resp.json()
          except json.JSONDecodeError:
              print("❌ Invalid JSON returned from trophy API:")
              print(resp.text)
              sys.exit(1)

          # filter out trophies with level 0
          trophies = [t for t in data if t.get("level", 0) > 0]

          # build the image URL just like before
          params = "&".join(f"title={t['name'].replace(' ', '+')}" for t in trophies)
          base_img = (
              f"https://github-profile-trophy.vercel.app/"
              f"?username={username}&theme=onestar&margin-w=10"
          )
          trophy_img = f"{base_img}&{params}" if params else base_img

          trophy_md = (
              '<a href="https://github.com/ryo-ma/github-profile-trophy">\n'
              f'  <img src="{trophy_img}" alt="trophy" />\n'
              '</a>'
          )

          # Read README.md, swap out between markers
          readme_path = "README.md"
          with open(readme_path, "r", encoding="utf-8") as f:
              content = f.read()

          new_content = re.sub(
              r"<!-- TROPHY_SECTION_START -->(.*?)<!-- TROPHY_SECTION_END -->",
              f"<!-- TROPHY_SECTION_START -->\n{trophy_md}\n<!-- TROPHY_SECTION_END -->",
              content,
              flags=re.DOTALL,
          )

          if content != new_content:
              with open(readme_path, "w", encoding="utf-8") as f:
                  f.write(new_content)
              print("✅ README.md updated.")
          else:
              print("ℹ️ No changes to README.md.")
          EOF

      - name: Commit and push if changed
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          if ! git diff --cached --quiet; then
            git commit -m "Update trophies in README [CI]"
            git push
          else
            echo "No changes to commit"
          fi
