---
name: Update Trophies in README

on:
  schedule:
    - cron: '0 0 * * *'  # Runs every day at midnight
  workflow_dispatch:  # Allow manual trigger
  push:
    branches: [main]
    paths: ['.github/workflows/update-trophies.yml']

permissions:
  contents: write

jobs:
  update-trophies:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install requests
        run: pip install requests

      - name: Update trophies with high-level achievements
        env:
          GITHUB_USERNAME: DevRitesh08
        run: |
          python <<'EOF'
          import os
          import re
          import requests
          from time import sleep

          username = os.getenv("GITHUB_USERNAME")
          if not username:
              print("‚ùå GITHUB_USERNAME not set")
              exit(1)

          # Trophy services with parameters for high-level trophies only
          trophy_services = [
              f"https://github-profile-trophy.vercel.app/?username={username}&theme=merko&no-frame=false&no-bg=false&margin-w=4&rank=SECRET,SSS,SS,S,AAA,AA,A&hide=issues",
              f"https://github-readme-trophy.vercel.app/?username={username}&theme=merko&no-frame=false&no-bg=false&margin-w=4&rank=SECRET,SSS,SS,S,AAA,AA,A&hide=issues",
              f"https://trophy-ryo-ma.vercel.app/?username={username}&theme=merko&no-frame=false&no-bg=false&margin-w=4&rank=SECRET,SSS,SS,S,AAA,AA,A&hide=issues"
          ]

          working_trophy_url = None
          
          # Test each service to find a working one
          for trophy_url in trophy_services:
              try:
                  print(f"Testing trophy service: {trophy_url}")
                  response = requests.get(trophy_url, timeout=15)
                  if response.status_code == 200 and len(response.content) > 1000:
                      working_trophy_url = trophy_url
                      print(f"‚úÖ Found working trophy service")
                      break
                  else:
                      print(f"‚ùå Service returned status {response.status_code} or insufficient content")
              except Exception as e:
                  print(f"‚ùå Service failed: {e}")
                  continue
              sleep(2)  # Be nice to services

          # Generate trophy markdown
          if working_trophy_url:
              print("‚úÖ Using working trophy service")
              trophy_md = f'<p align="center">\n  <img src="{working_trophy_url}" alt="GitHub Trophies"/>\n</p>'
          else:
              print("‚ö†Ô∏è No trophy service available, using fallback")
              # Fallback with GitHub achievement badges
              trophy_md = f'<p align="center">' + f'\n  <img src="https://img.shields.io/github/followers/{username}?style=social&label=Followers" alt="GitHub Followers"/>' + f'\n  <img src="https://img.shields.io/github/stars/{username}?style=social&label=Total Stars" alt="GitHub Stars"/>' + f'\n  <br/>' + f'\n  <img src="https://img.shields.io/badge/üèÜ_Developer-Active-brightgreen?style=for-the-badge" alt="Active Developer"/>' + f'\n  <img src="https://img.shields.io/badge/üìà_Growth-Continuous-orange?style=for-the-badge" alt="Continuous Growth"/>' + f'\n</p>'

          # Read current README
          with open("README.md", "r", encoding="utf-8") as f:
              readme = f.read()

          # Update trophy section
          new_readme = re.sub(
              r'<!-- TROPHY_SECTION_START -->(.*?)<!-- TROPHY_SECTION_END -->',
              f'<!-- TROPHY_SECTION_START -->\n{trophy_md}\n<!-- TROPHY_SECTION_END -->',
              readme,
              flags=re.DOTALL,
          )

          # Write updated README
          with open("README.md", "w", encoding="utf-8") as f:
              f.write(new_readme)
              
          print("‚úÖ README.md updated successfully with high-level trophies")
          EOF

      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin main
          git rebase origin/main
          git add README.md
          git diff --cached --quiet || git commit -m "üîÑ Update high-level trophies in README [CI]"
          git push origin HEAD:main
