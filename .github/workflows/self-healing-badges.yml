name: Self-Healing Badges and GIFs in README

on:
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch:

jobs:
  fix-badges:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Python requests
        run: pip install requests

      - name: Auto-fix and self-heal broken images and GIFs in README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 -c "
          import re, requests
          
          readme = 'README.md'
          alternatives = {
              'https://streak-stats.demolab.com': 'https://github-readme-streak-stats.herokuapp.com',
              'https://github-profile-trophy.vercel.app': 'https://github-readme-trophy.vercel.app',
          }
          placeholder_img = 'https://img.shields.io/badge/badge-broken%20image-red'
          placeholder_gif = 'https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif'
          
          def find_alternative(url):
              for key in alternatives:
                  if key in url:
                      return url.replace(key, alternatives[key])
              if url.lower().endswith('.gif'):
                  return placeholder_gif
              return placeholder_img
          
          with open(readme, 'r', encoding='utf-8') as f:
              content = f.read()
          
          md_imgs = re.findall(r'!\[.*?\]\((.*?)\)', content)
          html_imgs = re.findall(r'<img[^>]*src=\"([^\"]+)\"', content)
          img_urls = set(md_imgs + html_imgs)
          img_urls = {u for u in img_urls if u.startswith('http')}
          
          broken = {}
          for url in img_urls:
              if url in (placeholder_img, placeholder_gif) or any(alt in url for alt in alternatives.values()):
                  continue
              try:
                  r = requests.get(url, timeout=10)
                  if r.status_code not in (200, 304):
                      broken[url] = r.status_code
              except Exception as e:
                  broken[url] = str(e)
          
          new_content = content
          for url in broken:
              alt_url = find_alternative(url)
              print(f'Auto-replacing: {url} -> {alt_url}')
              new_content = re.sub(
                  r'!\[([^\]]*)\]\(' + re.escape(url) + r'\)',
                  f'<img src=\"{alt_url}\" alt=\"\\1\" data-original=\"{url}\"/>',
                  new_content
              )
              new_content = re.sub(
                  r'<img([^>]*)src=\"' + re.escape(url) + r'\"',
                  f'<img\\1src=\"{alt_url}\" data-original=\"{url}\"',
                  new_content
              )
          
          if content != new_content:
              with open(readme, 'w', encoding='utf-8') as f:
                  f.write(new_content)
              print('âœ… README.md updated (auto-fix/self-heal).')
          else:
              print('No changes needed.')
          "

      - name: Commit and push if changed
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          if ! git diff --cached --quiet; then
            git commit -m "Auto-fix/self-heal broken images and GIFs in README [CI]"
            git push
          else
            echo "No changes to commit"
          fi
