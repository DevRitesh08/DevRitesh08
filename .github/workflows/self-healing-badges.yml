name: Self-Healing Badges and GIFs in README

on:
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch:

jobs:
  fix-badges:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Python requests
        run: pip install requests

      - name: Auto-fix and self-heal broken images and GIFs in README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 <<'EOF'
          import re, requests

          readme = "README.md"
          alternatives = {
              # ... your mapping ...
          }
          placeholder_img = "https://img.shields.io/badge/badge-broken%20image-red"
          placeholder_gif = "https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif"

          def find_alternative(url):
              if url in alternatives:
                  return alternatives[url]
              if url.lower().endswith('.gif'):
                  return placeholder_gif
              return placeholder_img

          with open(readme, "r", encoding="utf-8") as f:
              content = f.read()

          def restore_images(text):
              pattern = re.compile(
                  r'(<img[^>]*src=")([^"]+)"([^>]*data-original=")([^"]+)"',
                  re.IGNORECASE
              )
              def repl(match):
                  alt_or_placeholder = match.group(2)
                  orig = match.group(4)
                  try:
                      r = requests.get(orig, timeout=10)
                      if r.status_code in (200, 304):
                          print(f"Restoring original: {orig}")
                          return match.group(1) + orig + '"' + match.group(3) + orig + '"'
                  except Exception:
                      pass
                  return match.group(0)
              return pattern.sub(repl, text)

          content = restore_images(content)

          md_imgs = re.findall(r'!\[.*?\]\((.*?)\)', content)
          html_imgs = re.findall(r'<img[^>]*src="([^"]+)"', content)
          img_urls = set(md_imgs + html_imgs)
          img_urls = {u for u in img_urls if u.startswith("http")}

          broken = {}
          for url in img_urls:
              if url in (placeholder_img, placeholder_gif) or url in alternatives.values():
                  continue
              try:
                  r = requests.get(url, timeout=10)
                  if r.status_code not in (200, 304):
                      broken[url] = r.status_code
              except Exception as e:
                  broken[url] = str(e)

          new_content = content
          for url in broken:
              alt_url = find_alternative(url)
              print(f"Auto-replacing: {url} -> {alt_url}")
              new_content = re.sub(
                  r'!\[([^\]]*)\]\(' + re.escape(url) + r'\)',
                  f'<img src="{alt_url}" alt="\\1" data-original="{url}"/>',
                  new_content
              )
              new_content = re.sub(
                  r'<img([^>]*)src="' + re.escape(url) + r'"',
                  f'<img\\1src="{alt_url}" data-original="{url}"',
                  new_content
              )

          if content != new_content:
              with open(readme, "w", encoding="utf-8") as f:
                  f.write(new_content)
              print("âœ… README.md updated (auto-fix/self-heal).")
          else:
              print("No changes needed.")
          EOF

      - name: Commit and push if changed
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          if ! git diff --cached --quiet; then
            git commit -m "Auto-fix/self-heal broken images and GIFs in README [CI]"
            git push
          else
            echo "No changes to commit"
